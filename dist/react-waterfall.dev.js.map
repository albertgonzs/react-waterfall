{"version":3,"file":"react-waterfall.dev.js","sources":["../src/Components/Provider.js","../src/Components/Prevent.js","../src/helpers/connect.js","../src/helpers/subscriptions.js","../src/helpers/devtools.js","../src/index.js"],"sourcesContent":["// @flow\n/* eslint-disable no-undef */\n\nimport React, { Component } from 'react'\n\nimport type { CreateProvider, State } from '../types'\n\ntype Props = { children: React$Node }\n\nconst EnhancedProvider: CreateProvider = (\n  setProvider,\n  Provider,\n  initialState,\n) =>\n  class EnhancedProvider extends Component<Props, State> {\n    constructor() {\n      super()\n      this.state = initialState\n      setProvider(this)\n    }\n\n    render() {\n      return <Provider value={this.state}>{this.props.children}</Provider>\n    }\n  }\n\nexport default EnhancedProvider\n","// @flow\n/* eslint-disable no-undef */\n\nimport { PureComponent } from 'react'\n\ntype Props = {\n  renderComponent: ({}) => React$Node,\n}\n\nexport default class Prevent extends PureComponent<Props> {\n  render() {\n    const { renderComponent, ...rest } = this.props\n    return renderComponent(rest)\n  }\n}\n","// @flow\n/* eslint-disable no-undef */\n\nimport * as React from 'react'\nimport Prevent from '../Components/Prevent'\n\nimport type { CreateConnect } from '../types'\n\nconst connect: CreateConnect = Consumer => mapStateToProps => WrappedComponent => {\n  const renderComponent = props => <WrappedComponent {...props} />\n  const ConnectedComponent = props => (\n    <Consumer>\n      {state => {\n        const filteredState = mapStateToProps(state || {})\n        return (\n          <Prevent\n            renderComponent={renderComponent}\n            {...props}\n            {...filteredState}\n          />\n        )\n      }}\n    </Consumer>\n  )\n\n  ConnectedComponent.displayName = `Connect(${WrappedComponent.displayName ||\n    WrappedComponent.name ||\n    'Unknown'})`\n\n  return ConnectedComponent\n}\n\nexport default connect\n","// @flow\n/* eslint-disable no-undef */\n\nimport type { Subscription } from '../types'\n\nexport default class Subscriptions {\n  subscriptions = []\n\n  getSubscriptions = () => this.subscriptions\n\n  subscribe = (subscription: Subscription) => {\n    this.subscriptions = [...this.subscriptions, subscription]\n  }\n\n  unsubscribe = (subscription: Subscription) => {\n    this.subscriptions = this.subscriptions.filter(subscriber => subscriber !== subscription)\n  }\n}\n","let id = 0\n\nexport default ({ initialState }, self, actions) => {\n  const reduxDevTools = window.devToolsExtension\n\n  const instanceID = id\n  id += 1\n\n  const name = `react-waterfall - ${instanceID}`\n  const features = {\n    jump: true,\n  }\n\n  const devTools = reduxDevTools.connect({ name, features })\n\n  devTools.subscribe(data => {\n    switch (data.type) {\n      case 'START':\n        devTools.init(initialState)\n        break\n      case 'RESET':\n        self.setState(initialState)\n        break\n      case 'DISPATCH':\n        switch (data.payload.type) {\n          case 'JUMP_TO_STATE':\n          case 'JUMP_TO_ACTION': {\n            self.setState(JSON.parse(data.state))\n            break\n          }\n          default:\n            break\n        }\n        break\n      default:\n        break\n    }\n  })\n\n  return (action, ...arg) => {\n    devTools.send({ type: action, ...arg }, self.state, {}, instanceID)\n  }\n}\n","// @flow\n/* eslint-disable no-undef */\n\nimport { createContext } from 'react'\n\nimport createProvider from './Components/Provider'\nimport createConnect from './helpers/connect'\nimport Subscriptions from './helpers/subscriptions'\nimport devtools from './helpers/devtools'\n\nimport type {\n  CreateStore,\n  ProviderType,\n  SetProvider,\n  CustomSetState,\n  Context,\n} from './types'\n\nconst defaultMiddlewares =\n  process.env.NODE_ENV === 'development' &&\n  typeof window !== 'undefined' &&\n  window.devToolsExtension\n    ? [devtools]\n    : []\n\nconst createStore: CreateStore = (\n  { initialState, actions: actionsCreators = {} },\n  middlewares = [],\n) => {\n  let provider: ProviderType\n  const context: Context = createContext()\n\n  const { getSubscriptions, subscribe, unsubscribe } = new Subscriptions()\n\n  const setProvider: SetProvider = self => {\n    const initializedMiddlewares = [...middlewares, ...defaultMiddlewares].map(middleware =>\n      middleware({ initialState, actionsCreators }, self, actions))\n\n    provider = {\n      getState: () => self.state,\n      setState: (state, callback) => self.setState(state, callback),\n      initializedMiddlewares,\n    }\n  }\n\n  const setState: CustomSetState = (action, state, ...args) => {\n    const subscriptions = getSubscriptions()\n    subscriptions.forEach(fn => fn(action, state, ...args))\n    provider.setState(state, () =>\n      provider.initializedMiddlewares.forEach(m => m(action, ...args)))\n  }\n\n  const actions = Object.keys(actionsCreators).reduce(\n    (r, v) => ({\n      ...r,\n      [v]: (...args) => {\n        if (!provider) {\n          console.error('<Provider /> is not initialized yet')\n          return\n        }\n        const result = actionsCreators[v](provider.getState(), ...args)\n        if (result.then) result.then(res => setState(v, res, ...args))\n        else setState(v, result, ...args)\n      },\n    }),\n    {},\n  )\n\n  const Provider = createProvider(setProvider, context.Provider, initialState)\n  const connect = createConnect(context.Consumer)\n\n  return {\n    Provider,\n    connect,\n    actions,\n    subscribe,\n    unsubscribe,\n  }\n}\n\nexport default createStore\n"],"names":["EnhancedProvider","setProvider","Provider","initialState","state","React","this","props","children","Component","Prevent","renderComponent","PureComponent","connect","React.createElement","WrappedComponent","ConnectedComponent","Consumer","filteredState","mapStateToProps","displayName","name","Subscriptions","_this","subscriptions","subscription","filter","subscriber","id","self","actions","reduxDevTools","window","devToolsExtension","instanceID","devTools","subscribe","data","type","init","setState","payload","JSON","parse","action","arg","send","defaultMiddlewares","devtools","createStore","provider","actionsCreators","middlewares","context","createContext","getSubscriptions","unsubscribe","args","forEach","fn","initializedMiddlewares","m","Object","keys","reduce","r","v","result","getState","then","res","error","createProvider","_toConsumableArray","map","middleware","callback","createConnect"],"mappings":"gsFASA,IAAMA,iBAAmC,SACvCC,EACAC,EACAC,2IAKSC,MAAQD,sHAKNE,6BAACH,SAAgBI,KAAKF,OAAQE,KAAKC,MAAMC,gCARrBC,kBCLZC,sMAEoBJ,KAAKC,aACnCI,IADCA,wFAFyBC,qBCD/BC,QAAyB,mBAAY,mBAAmB,gBACtDF,EAAkB,mBAASG,oBAACC,EAAqBR,IACjDS,EAAqB,mBACzBF,oBAACG,OACE,gBACOC,EAAgBC,EAAgBf,cAEpCU,oBAACJ,kCACkBC,GACbJ,EACAW,gBAOKE,8BAAyBL,EAAiBK,aAC3DL,EAAiBM,MACjB,eAEKL,KCxBYM,+IAGA,kBAAMC,EAAKC,iDAElB,SAACC,KACND,iCAAoBD,EAAKC,uBAAeC,yCAGjC,SAACA,KACRD,cAAgBD,EAAKC,cAAcE,OAAO,mBAAcC,IAAeF,OCf5EG,GAAK,sBAEyBC,EAAMC,OAAtB3B,IAAAA,aACV4B,EAAgBC,OAAOC,kBAEvBC,EAAaN,OACb,MAEAP,8BAA4Ba,GAK5BC,EAAWJ,EAAclB,gCAHvB,cAKCuB,UAAU,mBACTC,EAAKC,UACN,UACMC,KAAKpC,aAEX,UACEqC,SAASrC,aAEX,kBACKkC,EAAKI,QAAQH,UACd,oBACA,mBACEE,SAASE,KAAKC,MAAMN,EAAKjC,YAYjC,SAACwC,8BAAWC,yDACRC,yBAAaF,GAAWC,GAAOhB,EAAKzB,SAAW8B,KCtBtDa,mBAEc,oBAAXf,QACPA,OAAOC,mBACFe,aAGDC,YAA2B,gBAI3BC,EAHF/C,IAAAA,iBAAc2B,QAASqB,kBACzBC,4DAGMC,EAAmBC,wBAE4B,IAAIhC,cAAjDiC,IAAAA,iBAAkBnB,IAAAA,UAAWoB,IAAAA,YAa/BhB,EAA2B,SAACI,EAAQxC,8BAAUqD,uDAC5BF,IACRG,QAAQ,mBAAMC,gBAAGf,EAAQxC,UAAUqD,QACxCjB,SAASpC,EAAO,kBACvB8C,EAASU,uBAAuBF,QAAQ,mBAAKG,gBAAEjB,UAAWa,SAGxD3B,EAAUgC,OAAOC,KAAKZ,GAAiBa,OAC3C,SAACC,EAAGC,2BACCD,qBACFC,EAAI,sCAAIT,gDACFP,OAICiB,EAAShB,EAAgBe,YAAGhB,EAASkB,mBAAeX,IACtDU,EAAOE,KAAMF,EAAOE,KAAK,mBAAO7B,gBAAS0B,EAAGI,UAAQb,MACnDjB,gBAAS0B,EAAGC,UAAWV,iBALlBc,MAAM,+DAWLC,iBAlCgB,gBACzBZ,EAAyBa,mBAAIrB,UAAgBL,oBAAoB2B,IAAI,mBACzEC,qCAA8C9C,EAAMC,iBAG1C,kBAAMD,EAAKzB,gBACX,SAACA,EAAOwE,UAAa/C,EAAKW,SAASpC,EAAOwE,+BA4BXvB,EAAQnD,SAAUC,WAC/C0E,QAAcxB,EAAQpC"}